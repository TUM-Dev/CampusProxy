/*
 * CAMPUSOnline Webservice proxy
 *
 * This is the proxy server for CAMPUSOnline Webservices, enabling a nicely documented and uniform rest access to CAMPUSOnline resources.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RoutesSingleEvent struct for RoutesSingleEvent
type RoutesSingleEvent struct {
	Address *RoutesAddress `json:"address,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Dtend *string `json:"dtend,omitempty"`
	Dtstamp *string `json:"dtstamp,omitempty"`
	Dtstart *string `json:"dtstart,omitempty"`
	Duration *string `json:"duration,omitempty"`
	GroupID *int32 `json:"groupID,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
	RecurringID *string `json:"recurringID,omitempty"`
	SingleEventID *int32 `json:"singleEventID,omitempty"`
	SingleEventTypeID *string `json:"singleEventTypeID,omitempty"`
	SingleEventTypeName *string `json:"singleEventTypeName,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusID *string `json:"statusID,omitempty"`
}

// NewRoutesSingleEvent instantiates a new RoutesSingleEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesSingleEvent() *RoutesSingleEvent {
	this := RoutesSingleEvent{}
	return &this
}

// NewRoutesSingleEventWithDefaults instantiates a new RoutesSingleEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesSingleEventWithDefaults() *RoutesSingleEvent {
	this := RoutesSingleEvent{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetAddress() RoutesAddress {
	if o == nil || o.Address == nil {
		var ret RoutesAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetAddressOk() (*RoutesAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given RoutesAddress and assigns it to the Address field.
func (o *RoutesSingleEvent) SetAddress(v RoutesAddress) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RoutesSingleEvent) SetComment(v string) {
	o.Comment = &v
}

// GetDtend returns the Dtend field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetDtend() string {
	if o == nil || o.Dtend == nil {
		var ret string
		return ret
	}
	return *o.Dtend
}

// GetDtendOk returns a tuple with the Dtend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetDtendOk() (*string, bool) {
	if o == nil || o.Dtend == nil {
		return nil, false
	}
	return o.Dtend, true
}

// HasDtend returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasDtend() bool {
	if o != nil && o.Dtend != nil {
		return true
	}

	return false
}

// SetDtend gets a reference to the given string and assigns it to the Dtend field.
func (o *RoutesSingleEvent) SetDtend(v string) {
	o.Dtend = &v
}

// GetDtstamp returns the Dtstamp field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetDtstamp() string {
	if o == nil || o.Dtstamp == nil {
		var ret string
		return ret
	}
	return *o.Dtstamp
}

// GetDtstampOk returns a tuple with the Dtstamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetDtstampOk() (*string, bool) {
	if o == nil || o.Dtstamp == nil {
		return nil, false
	}
	return o.Dtstamp, true
}

// HasDtstamp returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasDtstamp() bool {
	if o != nil && o.Dtstamp != nil {
		return true
	}

	return false
}

// SetDtstamp gets a reference to the given string and assigns it to the Dtstamp field.
func (o *RoutesSingleEvent) SetDtstamp(v string) {
	o.Dtstamp = &v
}

// GetDtstart returns the Dtstart field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetDtstart() string {
	if o == nil || o.Dtstart == nil {
		var ret string
		return ret
	}
	return *o.Dtstart
}

// GetDtstartOk returns a tuple with the Dtstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetDtstartOk() (*string, bool) {
	if o == nil || o.Dtstart == nil {
		return nil, false
	}
	return o.Dtstart, true
}

// HasDtstart returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasDtstart() bool {
	if o != nil && o.Dtstart != nil {
		return true
	}

	return false
}

// SetDtstart gets a reference to the given string and assigns it to the Dtstart field.
func (o *RoutesSingleEvent) SetDtstart(v string) {
	o.Dtstart = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *RoutesSingleEvent) SetDuration(v string) {
	o.Duration = &v
}

// GetGroupID returns the GroupID field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetGroupID() int32 {
	if o == nil || o.GroupID == nil {
		var ret int32
		return ret
	}
	return *o.GroupID
}

// GetGroupIDOk returns a tuple with the GroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetGroupIDOk() (*int32, bool) {
	if o == nil || o.GroupID == nil {
		return nil, false
	}
	return o.GroupID, true
}

// HasGroupID returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasGroupID() bool {
	if o != nil && o.GroupID != nil {
		return true
	}

	return false
}

// SetGroupID gets a reference to the given int32 and assigns it to the GroupID field.
func (o *RoutesSingleEvent) SetGroupID(v int32) {
	o.GroupID = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *RoutesSingleEvent) SetGroupName(v string) {
	o.GroupName = &v
}

// GetRecurringID returns the RecurringID field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetRecurringID() string {
	if o == nil || o.RecurringID == nil {
		var ret string
		return ret
	}
	return *o.RecurringID
}

// GetRecurringIDOk returns a tuple with the RecurringID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetRecurringIDOk() (*string, bool) {
	if o == nil || o.RecurringID == nil {
		return nil, false
	}
	return o.RecurringID, true
}

// HasRecurringID returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasRecurringID() bool {
	if o != nil && o.RecurringID != nil {
		return true
	}

	return false
}

// SetRecurringID gets a reference to the given string and assigns it to the RecurringID field.
func (o *RoutesSingleEvent) SetRecurringID(v string) {
	o.RecurringID = &v
}

// GetSingleEventID returns the SingleEventID field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetSingleEventID() int32 {
	if o == nil || o.SingleEventID == nil {
		var ret int32
		return ret
	}
	return *o.SingleEventID
}

// GetSingleEventIDOk returns a tuple with the SingleEventID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetSingleEventIDOk() (*int32, bool) {
	if o == nil || o.SingleEventID == nil {
		return nil, false
	}
	return o.SingleEventID, true
}

// HasSingleEventID returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasSingleEventID() bool {
	if o != nil && o.SingleEventID != nil {
		return true
	}

	return false
}

// SetSingleEventID gets a reference to the given int32 and assigns it to the SingleEventID field.
func (o *RoutesSingleEvent) SetSingleEventID(v int32) {
	o.SingleEventID = &v
}

// GetSingleEventTypeID returns the SingleEventTypeID field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetSingleEventTypeID() string {
	if o == nil || o.SingleEventTypeID == nil {
		var ret string
		return ret
	}
	return *o.SingleEventTypeID
}

// GetSingleEventTypeIDOk returns a tuple with the SingleEventTypeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetSingleEventTypeIDOk() (*string, bool) {
	if o == nil || o.SingleEventTypeID == nil {
		return nil, false
	}
	return o.SingleEventTypeID, true
}

// HasSingleEventTypeID returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasSingleEventTypeID() bool {
	if o != nil && o.SingleEventTypeID != nil {
		return true
	}

	return false
}

// SetSingleEventTypeID gets a reference to the given string and assigns it to the SingleEventTypeID field.
func (o *RoutesSingleEvent) SetSingleEventTypeID(v string) {
	o.SingleEventTypeID = &v
}

// GetSingleEventTypeName returns the SingleEventTypeName field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetSingleEventTypeName() string {
	if o == nil || o.SingleEventTypeName == nil {
		var ret string
		return ret
	}
	return *o.SingleEventTypeName
}

// GetSingleEventTypeNameOk returns a tuple with the SingleEventTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetSingleEventTypeNameOk() (*string, bool) {
	if o == nil || o.SingleEventTypeName == nil {
		return nil, false
	}
	return o.SingleEventTypeName, true
}

// HasSingleEventTypeName returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasSingleEventTypeName() bool {
	if o != nil && o.SingleEventTypeName != nil {
		return true
	}

	return false
}

// SetSingleEventTypeName gets a reference to the given string and assigns it to the SingleEventTypeName field.
func (o *RoutesSingleEvent) SetSingleEventTypeName(v string) {
	o.SingleEventTypeName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RoutesSingleEvent) SetStatus(v string) {
	o.Status = &v
}

// GetStatusID returns the StatusID field value if set, zero value otherwise.
func (o *RoutesSingleEvent) GetStatusID() string {
	if o == nil || o.StatusID == nil {
		var ret string
		return ret
	}
	return *o.StatusID
}

// GetStatusIDOk returns a tuple with the StatusID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesSingleEvent) GetStatusIDOk() (*string, bool) {
	if o == nil || o.StatusID == nil {
		return nil, false
	}
	return o.StatusID, true
}

// HasStatusID returns a boolean if a field has been set.
func (o *RoutesSingleEvent) HasStatusID() bool {
	if o != nil && o.StatusID != nil {
		return true
	}

	return false
}

// SetStatusID gets a reference to the given string and assigns it to the StatusID field.
func (o *RoutesSingleEvent) SetStatusID(v string) {
	o.StatusID = &v
}

func (o RoutesSingleEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Dtend != nil {
		toSerialize["dtend"] = o.Dtend
	}
	if o.Dtstamp != nil {
		toSerialize["dtstamp"] = o.Dtstamp
	}
	if o.Dtstart != nil {
		toSerialize["dtstart"] = o.Dtstart
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.GroupID != nil {
		toSerialize["groupID"] = o.GroupID
	}
	if o.GroupName != nil {
		toSerialize["groupName"] = o.GroupName
	}
	if o.RecurringID != nil {
		toSerialize["recurringID"] = o.RecurringID
	}
	if o.SingleEventID != nil {
		toSerialize["singleEventID"] = o.SingleEventID
	}
	if o.SingleEventTypeID != nil {
		toSerialize["singleEventTypeID"] = o.SingleEventTypeID
	}
	if o.SingleEventTypeName != nil {
		toSerialize["singleEventTypeName"] = o.SingleEventTypeName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusID != nil {
		toSerialize["statusID"] = o.StatusID
	}
	return json.Marshal(toSerialize)
}

type NullableRoutesSingleEvent struct {
	value *RoutesSingleEvent
	isSet bool
}

func (v NullableRoutesSingleEvent) Get() *RoutesSingleEvent {
	return v.value
}

func (v *NullableRoutesSingleEvent) Set(val *RoutesSingleEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesSingleEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesSingleEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesSingleEvent(val *RoutesSingleEvent) *NullableRoutesSingleEvent {
	return &NullableRoutesSingleEvent{value: val, isSet: true}
}

func (v NullableRoutesSingleEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesSingleEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


