/*
 * CAMPUSOnline Webservice proxy
 *
 * This is the proxy server for CAMPUSOnline Webservices, enabling a nicely documented and uniform rest access to CAMPUSOnline resources.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RoutesCourseInstructionLanguage struct for RoutesCourseInstructionLanguage
type RoutesCourseInstructionLanguage struct {
	TeachingLang *string `json:"teaching_lang,omitempty"`
}

// NewRoutesCourseInstructionLanguage instantiates a new RoutesCourseInstructionLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesCourseInstructionLanguage() *RoutesCourseInstructionLanguage {
	this := RoutesCourseInstructionLanguage{}
	return &this
}

// NewRoutesCourseInstructionLanguageWithDefaults instantiates a new RoutesCourseInstructionLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesCourseInstructionLanguageWithDefaults() *RoutesCourseInstructionLanguage {
	this := RoutesCourseInstructionLanguage{}
	return &this
}

// GetTeachingLang returns the TeachingLang field value if set, zero value otherwise.
func (o *RoutesCourseInstructionLanguage) GetTeachingLang() string {
	if o == nil || o.TeachingLang == nil {
		var ret string
		return ret
	}
	return *o.TeachingLang
}

// GetTeachingLangOk returns a tuple with the TeachingLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesCourseInstructionLanguage) GetTeachingLangOk() (*string, bool) {
	if o == nil || o.TeachingLang == nil {
		return nil, false
	}
	return o.TeachingLang, true
}

// HasTeachingLang returns a boolean if a field has been set.
func (o *RoutesCourseInstructionLanguage) HasTeachingLang() bool {
	if o != nil && o.TeachingLang != nil {
		return true
	}

	return false
}

// SetTeachingLang gets a reference to the given string and assigns it to the TeachingLang field.
func (o *RoutesCourseInstructionLanguage) SetTeachingLang(v string) {
	o.TeachingLang = &v
}

func (o RoutesCourseInstructionLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TeachingLang != nil {
		toSerialize["teaching_lang"] = o.TeachingLang
	}
	return json.Marshal(toSerialize)
}

type NullableRoutesCourseInstructionLanguage struct {
	value *RoutesCourseInstructionLanguage
	isSet bool
}

func (v NullableRoutesCourseInstructionLanguage) Get() *RoutesCourseInstructionLanguage {
	return v.value
}

func (v *NullableRoutesCourseInstructionLanguage) Set(val *RoutesCourseInstructionLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesCourseInstructionLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesCourseInstructionLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesCourseInstructionLanguage(val *RoutesCourseInstructionLanguage) *NullableRoutesCourseInstructionLanguage {
	return &NullableRoutesCourseInstructionLanguage{value: val, isSet: true}
}

func (v NullableRoutesCourseInstructionLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesCourseInstructionLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


