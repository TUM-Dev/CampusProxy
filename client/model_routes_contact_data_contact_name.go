/*
 * CAMPUSOnline Webservice proxy
 *
 * This is the proxy server for CAMPUSOnline Webservices, enabling a nicely documented and uniform rest access to CAMPUSOnline resources.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RoutesContactDataContactName struct for RoutesContactDataContactName
type RoutesContactDataContactName struct {
	Chardata *string `json:"chardata,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewRoutesContactDataContactName instantiates a new RoutesContactDataContactName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesContactDataContactName() *RoutesContactDataContactName {
	this := RoutesContactDataContactName{}
	return &this
}

// NewRoutesContactDataContactNameWithDefaults instantiates a new RoutesContactDataContactName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesContactDataContactNameWithDefaults() *RoutesContactDataContactName {
	this := RoutesContactDataContactName{}
	return &this
}

// GetChardata returns the Chardata field value if set, zero value otherwise.
func (o *RoutesContactDataContactName) GetChardata() string {
	if o == nil || o.Chardata == nil {
		var ret string
		return ret
	}
	return *o.Chardata
}

// GetChardataOk returns a tuple with the Chardata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesContactDataContactName) GetChardataOk() (*string, bool) {
	if o == nil || o.Chardata == nil {
		return nil, false
	}
	return o.Chardata, true
}

// HasChardata returns a boolean if a field has been set.
func (o *RoutesContactDataContactName) HasChardata() bool {
	if o != nil && o.Chardata != nil {
		return true
	}

	return false
}

// SetChardata gets a reference to the given string and assigns it to the Chardata field.
func (o *RoutesContactDataContactName) SetChardata(v string) {
	o.Chardata = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RoutesContactDataContactName) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesContactDataContactName) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RoutesContactDataContactName) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RoutesContactDataContactName) SetText(v string) {
	o.Text = &v
}

func (o RoutesContactDataContactName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Chardata != nil {
		toSerialize["chardata"] = o.Chardata
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableRoutesContactDataContactName struct {
	value *RoutesContactDataContactName
	isSet bool
}

func (v NullableRoutesContactDataContactName) Get() *RoutesContactDataContactName {
	return v.value
}

func (v *NullableRoutesContactDataContactName) Set(val *RoutesContactDataContactName) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesContactDataContactName) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesContactDataContactName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesContactDataContactName(val *RoutesContactDataContactName) *NullableRoutesContactDataContactName {
	return &NullableRoutesContactDataContactName{value: val, isSet: true}
}

func (v NullableRoutesContactDataContactName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesContactDataContactName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


